<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PatternRecognition</name>
    </assembly>
    <members>
        <member name="T:PatternRecognition.ArtificialNeuralNetwork.NeuralNetwork">
            <summary>
            ニューラルネットワーク処理クラス
            </summary>
        </member>
        <member name="T:PatternRecognition.ArtificialNeuralNetwork.ILearningMachine">
            <summary>
            将来的にSVMの搭載も考えてインターフェイスを考察するために抽出してみたpublicたち
            現時点ではほぼ意味がない。特に引数のあたり。
            </summary>
        </member>
        <member name="F:PatternRecognition.ArtificialNeuralNetwork.NeuralNetwork.parameter">
            <summary>
            本クラスの構造を規定するパラメータ
            <para>中間層数などを格納する。</para>
            </summary>
        </member>
        <member name="F:PatternRecognition.ArtificialNeuralNetwork.NeuralNetwork.layer">
            <summary>
            演算処理を実行するレイヤークラス
            <para>再帰構造になっているので一つのオブジェクトで演算は完結している。</para>
            </summary>
        </member>
        <member name="M:PatternRecognition.ArtificialNeuralNetwork.NeuralNetwork.GetParameter">
            <summary>
            ニューラルネットワークの構成パラメータを返す
            </summary>
            <returns>ニューラルネットワークの構成パラメータ</returns>
        </member>
        <member name="M:PatternRecognition.ArtificialNeuralNetwork.NeuralNetwork.ToString">
            <summary>
            ニューラルネットの構成パラメータ及び結合係数を文字列として出力する。
            </summary>
            <returns></returns>
        </member>
        <member name="M:PatternRecognition.ArtificialNeuralNetwork.NeuralNetwork.Save(System.String,System.Boolean)">
            <summary>
            指定ファイル名でニューラルネットの状態量をテキストファイルへ保存する
            <para>デフォルトのファイル名は「NN.ini」です。</para>
            </summary>
            <param name="fname">ファイル名</param>
            <param name="append">追記の有無<para>true：追記</para></param>
        </member>
        <member name="M:PatternRecognition.ArtificialNeuralNetwork.NeuralNetwork.Recognize(System.Double[])">
            <summary>
            特徴ベクトルを基に識別を行う
            </summary>
            <param name="featureVector">特徴ベクトル</param>
            <returns>識別結果</returns>
        </member>
        <member name="M:PatternRecognition.ArtificialNeuralNetwork.NeuralNetwork.Recognize(PatternRecognition.Feature)">
            <summary>
            特徴ベクトルを基に識別を行う
            </summary>
            <param name="featureVector">特徴ベクトル</param>
            <returns>識別結果</returns>
        </member>
        <member name="M:PatternRecognition.ArtificialNeuralNetwork.NeuralNetwork.Recognize(System.Double)">
            <summary>
            特徴データを基に識別を行う
            <para>入力ユニットが1つの場合に使用します。出力層の第0ユニットの出力を返します。関数近似の用途を想定しています。</para>
            </summary>
            <param name="feature">特徴データ</param>
            <returns>返値<para>出力層の第0ユニットの出力</para></returns>
        </member>
        <member name="M:PatternRecognition.ArtificialNeuralNetwork.NeuralNetwork.Learn(System.Double[],System.Double[])">
            <summary>
            特徴ベクトルを基に、学習を行う
            </summary>
            <param name="featureVector">特徴ベクトル</param>
            <param name="NeuralNetTeacher">教師ベクトル</param>
            <returns>識別結果</returns>
        </member>
        <member name="M:PatternRecognition.ArtificialNeuralNetwork.NeuralNetwork.Learn(PatternRecognition.Feature,PatternRecognition.Vector)">
            <summary>
            特徴ベクトルを基に、学習を行う
            </summary>
            <param name="featureVector">特徴ベクトル</param>
            <param name="NeuralNetTeacher">教師ベクトル</param>
            <returns>識別結果</returns>
        </member>
        <member name="M:PatternRecognition.ArtificialNeuralNetwork.NeuralNetwork.Learn(PatternRecognition.Feature,System.Double)">
            <summary>
            特徴ベクトルを基に、学習を行う
            <para>出力が一つしかない場合に特に便利です。例えばXORの学習時に利用してください。</para>
            </summary>
            <param name="featureVector">特徴ベクトル</param>
            <param name="NeuralNetTeacher">教師データ</param>
            <returns>演算結果</returns>
        </member>
        <member name="M:PatternRecognition.ArtificialNeuralNetwork.NeuralNetwork.Learn(System.Double[],System.Double)">
            <summary>
            特徴ベクトルを基に、学習を行う
            <para>出力が一つしかない場合に特に便利です。例えばXORの学習時に利用してください。特徴ベクトルにはdouble型配列を用います。</para>
            </summary>
            <param name="featureVector">特徴ベクトル</param>
            <param name="NeuralNetTeacher">教師データ</param>
            <returns>演算結果</returns>
        </member>
        <member name="M:PatternRecognition.ArtificialNeuralNetwork.NeuralNetwork.Learn(System.Double,System.Double)">
            <summary>
            特徴データを基に、学習を行う
            <para>関数近似に利用可能です。</para>
            </summary>
            <param name="feature">特徴データ</param>
            <param name="NeuralNetTeacher">教師データ</param>
            <returns>演算結果</returns>
        </member>
        <member name="M:PatternRecognition.ArtificialNeuralNetwork.NeuralNetwork.Init">
            <summary>
            入力層・中間層・出力層のインスタンスを新規に生成するとともに、全ユニットを初期化する
            </summary>
        </member>
        <member name="M:PatternRecognition.ArtificialNeuralNetwork.NeuralNetwork.Setup(System.String)">
            <summary>
            ファイルを指定して結合係数を読み込ませる
            <para>ファイル名はデフォルトでは"NN.ini"です。</para>
            </summary>
            <param name="fname">初期化用のパラメータの書かれたファイルのパス</param>
        </member>
        <member name="M:PatternRecognition.ArtificialNeuralNetwork.NeuralNetwork.Setup(PatternRecognition.ArtificialNeuralNetwork.Parameter)">
            <summary>
            パラメータ構造体で初期化する
            </summary>
            <param name="_parameter">ニューラルネットワーク構造を規定するパラメータ</param>
        </member>
        <member name="M:PatternRecognition.ArtificialNeuralNetwork.NeuralNetwork.Setup(System.Object,System.Int32,System.Int32)">
            <summary>
            最小パラメータ構造体及び入力層と出力層のユニット数で初期化する
            </summary>
            <param name="minParameter">最小パラメータ</param>
            <param name="_numOfUnitInInputLayer">入力層のユニット数<para>特徴ベクトルの次元数と同じ数を指定して下さい。</para></param>
            <param name="_numOfUnitInOutputLayer">出力層のユニット数<para>この数は出力状態量と同じ数を指定して下さい。</para></param>
        </member>
        <member name="M:PatternRecognition.ArtificialNeuralNetwork.NeuralNetwork.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="P:PatternRecognition.ArtificialNeuralNetwork.NeuralNetwork.VariationOfError">
            <summary>
            出力誤差の変化量
            </summary>
        </member>
        <member name="P:PatternRecognition.ArtificialNeuralNetwork.NeuralNetwork.TotalOutputError">
            <summary>
            出力誤差の合計
            <para>絶対値をとった出力層における各ユニットの誤差を合計したものです。</para>
            </summary>
        </member>
        <member name="P:PatternRecognition.ArtificialNeuralNetwork.NeuralNetwork.OutputVectorLength">
            <summary>
            出力するベクトルの次元数
            <para>ニューラルネットにとっては出力層のユニット数に該当します。</para>
            </summary>
        </member>
        <member name="T:PatternRecognition.ArtificialNeuralNetwork.Unit">
            <summary>
            ニューラルネットのユニット
            <para>internal属性を付けていますので、属する名前空間の外には公開されません。</para>
            </summary>
        </member>
        <member name="F:PatternRecognition.ArtificialNeuralNetwork.Unit.weightVector">
            <summary>
            前の層との間の重みベクトル
            </summary>
        </member>
        <member name="F:PatternRecognition.ArtificialNeuralNetwork.Unit.correctionWeightVector">
            <summary>
            前の層との間の重みベクトルの修正量
            </summary>
        </member>
        <member name="F:PatternRecognition.ArtificialNeuralNetwork.Unit.inputValue">
            <summary>
            入力値
            </summary>
        </member>
        <member name="F:PatternRecognition.ArtificialNeuralNetwork.Unit.outputValue">
            <summary>
            出力値
            </summary>
        </member>
        <member name="F:PatternRecognition.ArtificialNeuralNetwork.Unit.error">
            <summary>
            出力誤差
            </summary>
        </member>
        <member name="F:PatternRecognition.ArtificialNeuralNetwork.Unit.threshold">
            <summary>
            発火の閾値
            </summary>
        </member>
        <member name="F:PatternRecognition.ArtificialNeuralNetwork.Unit.myRandom">
            <summary>
            乱数ジェネレータ
            <para>ユニットの初期化に利用します。</para>
            </summary>
        </member>
        <member name="M:PatternRecognition.ArtificialNeuralNetwork.Unit.ToString">
            <summary>
            重み行列を文字列化する
            </summary>
            <returns>文字列化した重み行列</returns>
        </member>
        <member name="M:PatternRecognition.ArtificialNeuralNetwork.Unit.CalibrateWeightVector(System.Double,System.Int32)">
            <summary>
            指定された修正量で指定された結合係数を修正する
            </summary>
            <param name="amountOfCorrection">修正量</param>
            <param name="index">インデックス番号</param>
        </member>
        <member name="M:PatternRecognition.ArtificialNeuralNetwork.Unit.SetCorrectionWeight(System.Double,System.Int32)">
            <summary>
            結合係数の修正量をセットする
            <para>本メソッドを呼び出しただけでは修正されません。DoCorrect()を呼び出すことで結合係数を修正します。</para>
            </summary>
            <param name="correction"></param>
            <param name="index"></param>
        </member>
        <member name="M:PatternRecognition.ArtificialNeuralNetwork.Unit.DoCorrect">
            <summary>
            結合係数を予めセットしている修正量で修正します
            <para>「新しい結合係数 = 古い結合係数 + 修正量」で定義しています。</para>
            </summary>
        </member>
        <member name="M:PatternRecognition.ArtificialNeuralNetwork.Unit.CalcOutput">
            <summary>
            出力値を計算してメンバ変数に保存する
            </summary>
        </member>
        <member name="M:PatternRecognition.ArtificialNeuralNetwork.Unit.GetOutput(PatternRecognition.Vector)">
            <summary>
            本ユニットに信号を入力し、出力を返す
            </summary>
            <param name="inputSignal">入力信号（ニューラルネットなら、前の層の出力ベクトル）</param>
            <returns>本ユニットの出力</returns>
        </member>
        <member name="M:PatternRecognition.ArtificialNeuralNetwork.Unit.AddInputValue(System.Double)">
            <summary>
            入力値を加算する
            <para>同時に、出力も計算する</para>
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:PatternRecognition.ArtificialNeuralNetwork.Unit.ClearThreshold">
            <summary>
            発火閾値を初期化する
            <para>発火閾値は0.0～1.0の間の乱数で初期化されます。</para>
            </summary>
        </member>
        <member name="M:PatternRecognition.ArtificialNeuralNetwork.Unit.ClearInputValue">
            <summary>
            入力値を初期化する
            <para>入力値は0.0で初期化されます。</para>
            </summary>
        </member>
        <member name="M:PatternRecognition.ArtificialNeuralNetwork.Unit.SetWeightVector(System.Double[])">
            <summary>
            重みベクトルをセット（上書き）する
            </summary>
            <param name="_weightVector">セットする重みベクトル</param>
        </member>
        <member name="M:PatternRecognition.ArtificialNeuralNetwork.Unit.SetWeightVector(PatternRecognition.Vector)">
            <summary>
            重みベクトルをセット（上書き）する
            </summary>
            <param name="_weightVector">セットする重みベクトル</param>
        </member>
        <member name="M:PatternRecognition.ArtificialNeuralNetwork.Unit.GetRandom">
            <summary>
            乱数を返す
            </summary>
            <returns>発生させた乱数</returns>
        </member>
        <member name="M:PatternRecognition.ArtificialNeuralNetwork.Unit.InitWeightVectorWithRandom">
            <summary>
            重みベクトルを乱数で初期化する
            </summary>
        </member>
        <member name="M:PatternRecognition.ArtificialNeuralNetwork.Unit.GetWeight(System.Int32)">
            <summary>
            指定要素の重みを返す
            </summary>
            <param name="index">要素番号</param>
            <returns>指定された要素番号の重み</returns>
            <exception cref="T:System.SystemException">指定要素番号が範囲内を超えるとスロー</exception>
        </member>
        <member name="M:PatternRecognition.ArtificialNeuralNetwork.Unit.GetWeightVector">
            <summary>
            重みベクトルを返す
            </summary>
            <returns>重みベクトル</returns>
        </member>
        <member name="M:PatternRecognition.ArtificialNeuralNetwork.Unit.#ctor(System.Int32)">
            <summary>
            コンストラクタ
            </summary>
            <param name="preLayerSize">前段のユニット数</param>
        </member>
        <member name="P:PatternRecognition.ArtificialNeuralNetwork.Unit.Length">
            <summary>
            重みベクトルサイズ
            </summary>
        </member>
        <member name="P:PatternRecognition.ArtificialNeuralNetwork.Unit.Output">
            <summary>
            本ユニットの出力
            </summary>
        </member>
        <member name="P:PatternRecognition.ArtificialNeuralNetwork.Unit.Error">
            <summary>
            本ユニットの誤差
            </summary>
        </member>
        <member name="P:PatternRecognition.ArtificialNeuralNetwork.Unit.Threshold">
            <summary>
            発火の閾値
            </summary>
        </member>
        <member name="T:PatternRecognition.ArtificialNeuralNetwork.Parameter">
            <summary>
            ニューラルネットワークのパラメータ構造体
            <para>主にパラメータの受け渡しと設定値の不正チェックを目的とする。</para>
            </summary>
        </member>
        <member name="F:PatternRecognition.ArtificialNeuralNetwork.Parameter.keywordOfUnitInputLayer">
            <summary>
            入力層のユニット数がこの文字列に続きます
            </summary>
        </member>
        <member name="F:PatternRecognition.ArtificialNeuralNetwork.Parameter.keywordOfUnitHiddenLayer">
            <summary>
            中間層のユニット数がこの文字列に続きます
            </summary>
        </member>
        <member name="F:PatternRecognition.ArtificialNeuralNetwork.Parameter.keywordOfUnitOutputLayer">
            <summary>
            出力層のユニット数がこの文字列に続きます
            </summary>
        </member>
        <member name="F:PatternRecognition.ArtificialNeuralNetwork.Parameter.keywordOfNumHiddenLayer">
            <summary>
            中間層数がこの文字列に続きます
            </summary>
        </member>
        <member name="F:PatternRecognition.ArtificialNeuralNetwork.Parameter.keywordOfLearningCoefficient">
            <summary>
            学習係数がこの文字列に続きます
            </summary>
        </member>
        <member name="F:PatternRecognition.ArtificialNeuralNetwork.Parameter.numOfHiddenLayer">
            <summary>
            中間層数
            </summary>
        </member>
        <member name="M:PatternRecognition.ArtificialNeuralNetwork.Parameter.ToString">
            <summary>
            パラメータを文字列として返す
            </summary>
            <returns>文字列化したパラメータ</returns>
        </member>
        <member name="M:PatternRecognition.ArtificialNeuralNetwork.Parameter.#ctor(System.String)">
            <summary>
            ファイル名を指定して、パラメータをファイルから読み込ませるコンストラクタ
            </summary>
            <param name="fname">ファイル名<para>デフォルト："Neural Network Parameter.txt"</para></param>
        </member>
        <member name="M:PatternRecognition.ArtificialNeuralNetwork.Parameter.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            全パラメータを指定するコンストラクタ
            </summary>
            <param name="_numOfUnitInInputLayer">入力層のユニット数<para>特徴ベクトルの次元数と同じ数を指定して下さい。</para></param>
            <param name="_numOfUnitInHiddenLayer">中間層のユニット数<para>この数が多いと、過学習に陥りやすくなります。n個で2^n状態を表すことができることを考慮して決定して下さい。</para></param>
            <param name="_numOfUnitInOutputLayer">出力層のユニット数<para>この数は出力状態量と同じ数を指定して下さい。</para></param>
            <param name="_numOfHiddenLayer">中間層数<para>この数+1だけ識別面（超平面）が形成されます。特徴量の分布をよく検討しなければまずいことになりそうです。</para></param>
            <param name="_learningCoefficient">学習係数<para>この数が大きいと結合係数の修正量が大きくなりすぎていつまでも収束しなくなります。かといって小さいといつまでも終わりません。カットアンドトライで確認してみてください。</para></param>
        </member>
        <member name="M:PatternRecognition.ArtificialNeuralNetwork.Parameter.#ctor(System.Object,System.Int32,System.Int32)">
            <summary>
            パラメータをMinParameterとパラで指定するコンストラクタ
            </summary>
            <param name="minParameter">最小パラメータ</param>
            <param name="_numOfUnitInInputLayer">入力層のユニット数<para>特徴ベクトルの次元数と同じ数を指定して下さい。</para></param>
            <param name="_numOfUnitInOutputLayer">出力層のユニット数<para>この数は出力状態量と同じ数を指定して下さい。</para></param>
        </member>
        <member name="P:PatternRecognition.ArtificialNeuralNetwork.Parameter.NumOfUnitInInputLayer">
            <summary>
            入力層のユニット数
            </summary>
        </member>
        <member name="P:PatternRecognition.ArtificialNeuralNetwork.Parameter.NumOfUnitInHiddenLayer">
            <summary>
            中間層のユニット数
            </summary>
        </member>
        <member name="P:PatternRecognition.ArtificialNeuralNetwork.Parameter.NumOfUnitInOutputLayer">
            <summary>
            出力層のユニット数
            </summary>
        </member>
        <member name="P:PatternRecognition.ArtificialNeuralNetwork.Parameter.TotalLayer">
            <summary>
            合計層数
            </summary>
        </member>
        <member name="P:PatternRecognition.ArtificialNeuralNetwork.Parameter.LearningCoefficient">
            <summary>
            学習係数
            </summary>
        </member>
        <member name="P:PatternRecognition.ArtificialNeuralNetwork.Parameter.Error">
            <summary>
            エラー状況
            <para>true: エラーあり</para>
            </summary>
        </member>
        <member name="T:PatternRecognition.Discriminator">
            <summary>
            識別クラス
            <para>ニューラルネットワークを利用した識別を行う。</para>
            </summary>
        </member>
        <member name="F:PatternRecognition.Discriminator._NNet">
            <summary>
            ニューラルネットクラス
            </summary>
        </member>
        <member name="F:PatternRecognition.Discriminator._IDnames">
            <summary>
            ID名
            </summary>
        </member>
        <member name="M:PatternRecognition.Discriminator.Setup(System.String)">
            <summary>
            識別用ニューラルネットの設定ファイルを読み込む
            <para>デフォルトのファイル名は"discriminator.ini"です。</para>
            </summary>
            <param name="fname">ファイル名</param>
        </member>
        <member name="M:PatternRecognition.Discriminator.GetIDandLikelihood(PatternRecognition.Vector,System.Int32)">
            <summary>
            ニューラルネットの演算結果を分かり易くIDと尤度にまとめて返す
            </summary>
            <param name="outputVector">ニューラルネットの出力ベクトル</param>
            <param name="productionVolume">配列の生成数（1以上かつ出力ベクトルの次元を超えないようにして下さい）</param>
            <returns>ID・尤度の組を配列に加工したもの<para>本クラスのIDnamesメンバがセットされていない場合は""が返ります。</para></returns>
            <exception cref="T:System.SystemException">要求サイズに異常があるとスロー</exception>
            <example>
            以下にサンプルコードを示します。
            このコードは処理の流れを大まかに示しています。
            実際にはnnclassは結合係数等をセットしなければ識別は行えません。
            <code>
            NeuralNetwork.Parameter para = new NeuralNetwork.Parameter(2, 6, 1, 1, 0.01);           // ニューラルネットのパラメータ設定
            NeuralNetwork nnclass = new NeuralNetwork(para);                                        // ニューラルネットクラスのインスタンス生成
            double[] feature10 = new double[2] { 1, 0 };                                            // 特徴ベクトル生成（XORを意識している）
            
            IDandLikelihood[] result = nnclass.ToIDandLikelihood(nnclass.Recognize(feature10), 3);  // 出力ベクトルをリレーさせて、構造体配列に変換している
            </code>
            </example>
        </member>
        <member name="M:PatternRecognition.Discriminator.Discriminate(PatternRecognition.Feature)">
            <summary>
            識別結果をIDと尤度で返す
            </summary>
            <param name="feature">特徴ベクトル</param>
            <returns>IDと尤度をセットにした識別結果</returns>
        </member>
        <member name="M:PatternRecognition.Discriminator.Discriminate(PatternRecognition.Feature,System.Int32)">
            <summary>
            識別結果をIDと尤度の配列で返す
            </summary>
            <param name="feature">特徴ベクトル</param>
            <param name="productionVolume">配列の生成数（1以上かつ出力ベクトルの次元を超えないようにして下さい）</param>
            <returns>IDと尤度をセットにした識別結果の配列</returns>
        </member>
        <member name="M:PatternRecognition.Discriminator.#ctor(PatternRecognition.ArtificialNeuralNetwork.NeuralNetwork,System.String[])">
            <summary>
            ニューラルネットのインスタンスとモデル名のリストを渡して初期化するコンストラクタ
            </summary>
            <param name="NNet">ニューラルネットワーククラスオブジェクト</param>
            <param name="IDnames">モデルIDのリスト<para>リストの要素番号とモデル名は関係があるので適当な順序で渡さない様に。あくまで学習器(NeuralNetTeacher)から取得して下さい。</para></param>
            <exception cref="T:System.SystemException">ニューラルネットのインスタンスが確保されていない場合と、モデルIDの数と出力層ユニット数が一致しなければスロー</exception>
        </member>
        <member name="M:PatternRecognition.Discriminator.#ctor">
            <summary>
            引数なしのコンストラクタ
            <para>Setup()を呼び出して初期化して下さい。</para>
            </summary>
        </member>
        <member name="P:PatternRecognition.Discriminator.Ready">
            <summary>
            利用準備状況
            </summary>
        </member>
        <member name="T:PatternRecognition.Discriminator.IDandLikelihood">
            <summary>
            識別結果を簡単に表現するための構造体
            <para>クラス名を表すIDと、尤度を格納する。</para>
            </summary>
        </member>
        <member name="F:PatternRecognition.Discriminator.IDandLikelihood.id">
            <summary>
            ID名
            </summary>
        </member>
        <member name="F:PatternRecognition.Discriminator.IDandLikelihood.likelihood">
            <summary>
            尤度
            </summary>
        </member>
        <member name="M:PatternRecognition.Discriminator.IDandLikelihood.#ctor(System.String,System.Double)">
            <summary>
            コンストラクタ
            </summary>
            <param name="_id">ID名</param>
            <param name="_likelihood">尤度</param>
        </member>
        <member name="P:PatternRecognition.Discriminator.IDandLikelihood.ID">
            <summary>
            ID名
            </summary>
        </member>
        <member name="P:PatternRecognition.Discriminator.IDandLikelihood.Likelihood">
            <summary>
            尤度
            </summary>
        </member>
        <member name="T:PatternRecognition.Vector">
            <summary>
            ベクトルクラス
            </summary>
        </member>
        <member name="F:PatternRecognition.Vector.vector">
            <summary>
            ベクトル要素
            </summary>
        </member>
        <member name="M:PatternRecognition.Vector.op_Addition(PatternRecognition.Vector,PatternRecognition.Vector)">
            <summary>
            二項+演算子（これで足し算が簡単にできる）
            </summary>
            <param name="c1">被加算値</param>
            <param name="c2">加算値</param>
            <returns>2値を加算した結果</returns>
        </member>
        <member name="M:PatternRecognition.Vector.op_Subtraction(PatternRecognition.Vector,PatternRecognition.Vector)">
            <summary>
            二項-演算子（これで引き算が簡単にできる）
            </summary>
            <param name="c1">被減算値</param>
            <param name="c2">減算値</param>
            <returns>2値の引き算の結果</returns>
        </member>
        <member name="M:PatternRecognition.Vector.op_Multiply(System.Double,PatternRecognition.Vector)">
            <summary>
            二項*演算子（これでスカラー積が簡単にできる）
            </summary>
            <param name="c1">積算値</param>
            <param name="c2">被積算値</param>
            <returns>演算結果</returns>
        </member>
        <member name="M:PatternRecognition.Vector.op_Division(PatternRecognition.Vector,System.Double)">
            <summary>
            二項/演算子（これでスカラー除法が簡単にできる）
            </summary>
            <param name="c1">被除数</param>
            <param name="c2">除数（法）</param>
            <returns>演算結果</returns>
        </member>
        <member name="M:PatternRecognition.Vector.Pow(System.Double)">
            <summary>
            ベクトルの各成分を指定乗する
            <para>破壊的メソッド</para>
            </summary>
            <param name="c">乗数</param>
            <returns>演算結果（被演算インスタンス）</returns>
        </member>
        <member name="M:PatternRecognition.Vector.Normalizing">
            <summary>
            正規化
            <para>ノルムが0だと動作しません。</para>
            </summary>
        </member>
        <member name="M:PatternRecognition.Vector.ToString(System.String)">
            <summary>
            ベクトル要素を文字列として返す
            <para>出力フォーマット付</para>
            </summary>
            <param name="format">出力フォーマット</param>
            <returns>ベクトル要素の中身</returns>
        </member>
        <member name="M:PatternRecognition.Vector.Add(System.Double)">
            <summary>
            ベクトル要素を追加する
            <para>後追加となる</para>
            </summary>
            <param name="add">追加したい要素</param>
        </member>
        <member name="M:PatternRecognition.Vector.Add(System.Double[])">
            <summary>
            ベクトル要素を追加する
            <para>後追加となる</para>
            </summary>
            <param name="addtionalVector">追加したいベクトル</param>
        </member>
        <member name="M:PatternRecognition.Vector.ToArray">
            <summary>
            ベクトル情報をdouble型配列で返す
            </summary>
            <returns>配列表現の特徴ベクトル</returns>
        </member>
        <member name="M:PatternRecognition.Vector.#ctor(System.Double[])">
            <summary>
            double型配列を使った初期化付コンストラクタ
            <para>配列はディープコピーされます。</para>
            </summary>
            <param name="_vector">double型配列</param>
            <exception cref="T:System.SystemException">配列がnullならスロー</exception>
        </member>
        <member name="M:PatternRecognition.Vector.#ctor(PatternRecognition.Vector)">
            <summary>
            コピーコンストラクタ
            </summary>
            <param name="_vector">Vectorクラスオブジェクト</param>
        </member>
        <member name="M:PatternRecognition.Vector.#ctor(System.String)">
            <summary>
            文字列を利用したコンストラクタ
            <para>カンマ・タブ・半角スペースで区切られた文字列を渡して下さい。</para>
            <para>解析に成功すると文字列に含まれていた数値がセットされます。</para>
            </summary>
            <param name="_vector">文字列表現のベクトル成分</param>
        </member>
        <member name="M:PatternRecognition.Vector.#ctor(System.Int32)">
            <summary>
            サイズ指定のコンストラクタ
            <para>指定したサイズのベクトルを生成します。生成後に一つ一つの要素にアクセスする用途を想定しています。</para>
            </summary>
            <param name="size">ベクトルの次元数</param>
        </member>
        <member name="M:PatternRecognition.Vector.#ctor(System.Double)">
            <summary>
            要素数1のベクトルを生成します
            <para>関数近似などの用途を想定しています。</para>
            </summary>
            <param name="value">格納したい数</param>
        </member>
        <member name="M:PatternRecognition.Vector.#ctor">
            <summary>
            初期化なしのコンストラクタ
            <para>空のベクトルを生成します。適宜要素を追加するような用途での使用を想定しています。</para>
            </summary>
        </member>
        <member name="P:PatternRecognition.Vector.Length">
            <summary>
            次元数
            </summary>
        </member>
        <member name="P:PatternRecognition.Vector.Norm">
            <summary>
            ノルム
            </summary>
        </member>
        <member name="P:PatternRecognition.Vector.Total">
            <summary>
            各要素の合計値
            </summary>
        </member>
        <member name="P:PatternRecognition.Vector.Item(System.Int32)">
            <summary>
            インデクサ
            <para>配列と同様にアクセスできます。</para>
            </summary>
            <param name="index">要素番号</param>
            <returns>指定されたベクトル要素を返す</returns>
        </member>
        <member name="T:PatternRecognition.Teacher">
            <summary>
            ニューラルネットワークの教師クラス
            <para>
            ニューラルネットワークを教育するクラスです。
            使用するには、インスタンス生成時にニューラルネットのパラメータを設定して下さい。
            [今後の予定]
            2011/12/24 ジャックナイフ判定法の導入は必要だろうなぁ。
            </para>
            </summary>
        </member>
        <member name="F:PatternRecognition.Teacher._class">
            <summary>
            クラスモデル
            <para>演算途中にソートすると識別結果がめちゃくちゃになる可能性があるので余りいじらないでください。</para>
            </summary>
        </member>
        <member name="F:PatternRecognition.Teacher._NNet">
            <summary>
            ニューラルネットワーク
            </summary>
        </member>
        <member name="F:PatternRecognition.Teacher.parameter">
            <summary>
            識別器のパラメータ
            </summary>
        </member>
        <member name="F:PatternRecognition.Teacher.myRandom">
            <summary>
            乱数ジェネレータ
            <para>モデル内をランダムに選択するのに利用します。</para>
            </summary>
        </member>
        <member name="M:PatternRecognition.Teacher.GetNeuralNetwork">
            <summary>
            学習に使用しているニューラルネットワーククラスオブジェクトを返す
            <para>学習結果を利用して識別を行う際に使用することを想定しています。</para>
            </summary>
            <returns>本クラスが保持するニューラルネットワーククラスオブジェクト</returns>
        </member>
        <member name="M:PatternRecognition.Teacher.SaveModelFeatures">
            <summary>
            登録されているクラスの特徴ベクトルをファイルへ出力する
            <para>モデル毎にファイルを分割して出力します。</para>
            <para>ファイル名にはモデルのIDが使用されます。</para>
            <para>ファイルは上書きされます。</para>
            <para>文字コードはUTF8です。</para>
            </summary>
        </member>
        <member name="M:PatternRecognition.Teacher.SaveLearnigOutcome(System.String)">
            <summary>
            モデル名一覧、識別器のパラメータを保存する
            <para>ファイルは上書きされます。</para>
            </summary>
            <param name="fname">ファイル名<para>デフォルトはDiscriminatorクラスのSetup()に合わせて"discriminator.ini"です。</para></param>
        </member>
        <member name="M:PatternRecognition.Teacher.CreateTeachingVector(System.String)">
            <summary>
            指定されたクラス名に応じた教師ベクトルを返す
            </summary>
            <param name="id">クラス名</param>
            <returns>教師ベクトル</returns>
        </member>
        <member name="M:PatternRecognition.Teacher.CreateTeachingVector(System.Int32)">
            <summary>
            指定されたクラス番号に応じた教師ベクトルを返す
            </summary>
            <param name="index">クラス要素番号</param>
            <returns>教師ベクトル</returns>
        </member>
        <member name="M:PatternRecognition.Teacher.GetIDnames">
            <summary>
            クラスのIDを文字列配列で返す
            </summary>
            <returns>ID名を配列にしたもの</returns>
        </member>
        <member name="M:PatternRecognition.Teacher.AddModel(PatternRecognition.Model)">
            <summary>
            クラスモデルを追加する
            <para>クラスモデルはディープコピーされます。</para>
            </summary>
            <param name="newClass">追加するクラスモデル</param>
            <exception cref="T:System.SystemException">モデルの2重登録があるとスロー</exception>
        </member>
        <member name="M:PatternRecognition.Teacher.CreateDecisionChart(PatternRecognition.ArtificialNeuralNetwork.NeuralNetwork,System.Collections.Generic.List{PatternRecognition.Model})">
            <summary>
            一通りの判別を行い、結果をヒストグラム（表：実態はVector[]）にまとめる
            <para>閾値による棄却は行っておりません。最大値の出力を持ったクラスを識別器の出した答えだとして集計を行っています。</para>
            <para>並列演算による交差確認法の演算のために、引数としてニューラルネットのインスタンスを受け取るようにしています。</para>
            </summary>
            <param name="discriminator">識別器</param>
            <param name="classForTest">識別対象の教師データモデル</param>
            <returns>判別結果を表にまとめたもの（実態はVector[]）</returns>
            <exception cref="T:System.SystemException">クラスモデルがセットされた状態でなければ例外をスロー</exception>
        </member>
        <member name="M:PatternRecognition.Teacher.GetEachAccurecyRate">
            <summary>
            個別のモデルの識別率を返す
            <para>格納される値の定義：モデルの正答数/モデルの特徴ベクトル数</para>
            <para>クラスモデルがセットされた状態でなければ例外をスローします。</para>
            </summary>
            <returns>クラスモデルIDと識別率をハッシュテーブルにまとめたもの</returns>
            <exception cref="T:System.SystemException">クラスモデルがセットされた状態でなければ例外をスロー</exception>
        </member>
        <member name="M:PatternRecognition.Teacher.GetTotalAccurecyRate">
            <summary>
            全モデルの総合での識別率を返す
            <para>本メソッドが返すTotal Accuracy Rateの定義：Total Accuracy Rate = 正答の総数/特徴ベクトルの総数</para>
            <para>Total Accuracy Rateの定義からして、正答率の高いモデルの特徴ベクトルが多ければ全体の正答率も高くなることに留意して下さい。</para>
            <para>クラスモデルがセットされた状態でなければ例外をスローします。</para>
            </summary>
            <returns>総合識別率</returns>
            <exception cref="T:System.SystemException">クラスモデルがセットされた状態でなければ例外をスロー</exception>
        </member>
        <member name="M:PatternRecognition.Teacher.SaveDecisionChartBody(PatternRecognition.Vector[],System.Collections.Generic.List{PatternRecognition.Model},System.String,System.String,System.String)">
            <summary>
            判別表をCSV形式で保存する処理の本体です
            <para>正解率などの数値は引数で渡された結果を基に計算しています。</para>
            </summary>
            <param name="decisionChart">判定表</param>
            <param name="classForTest">識別対象の教師データモデル</param>
            <param name="format">文字出力フォーマット</param>
            <param name="fname">保存ファイル名</param>
            <param name="delimiter">区切り文字</param>
            <returns>文字列で表した判別表</returns>
        </member>
        <member name="M:PatternRecognition.Teacher.SaveDecisionChart(System.String,System.String)">
            <summary>
            判別表をCSV形式で保存する
            </summary>
            <param name="fname">保存ファイル名</param>
            <param name="delimiter">区切り文字</param>
            <returns>文字列で表した判別表</returns>
            <exception cref="T:System.SystemException">クラスモデルがセットされた状態でなければ例外をスロー</exception>
        </member>
        <member name="M:PatternRecognition.Teacher.CheckLearningStrength(System.Int32[])">
            <summary>
            学習強度を格納した配列のチェックを行う
            <para>全て0以下であれば学習する必要がないのでfalseを返す。</para>
            </summary>
            <param name="learningStrength">学習強度</param>
            <returns>学習させる必要があるか<para>true：必要あり</para></returns>
        </member>
        <member name="M:PatternRecognition.Teacher.Learn(System.Int32)">
            <summary>
            学習を実行させる
            <para>学習強度は1:1に設定されますので、各モデルの保持する特徴ベクトルは等しい回数呼び出されます。</para>
            </summary>
            <param name="learningTimes">学習回数</param>
        </member>
        <member name="M:PatternRecognition.Teacher.Learn(System.Int32,PatternRecognition.ArtificialNeuralNetwork.NeuralNetwork,System.Collections.Generic.List{PatternRecognition.Model})">
            <summary>
            学習を実行させる
            <para>学習強度は1:1に設定されますので、各モデルの保持する特徴ベクトルは等しい回数呼び出されます。</para>
            </summary>
            <param name="learningTimes">学習回数</param>
            <param name="discriminator">学習させる識別器</param>
            <param name="classForLearning">学習用教師データモデル</param>
        </member>
        <member name="M:PatternRecognition.Teacher.Learn(System.Int32,System.Int32[])">
            <summary>
            学習を実行させる
            <para>学習強度を引数で設定可能です。</para>
            </summary>
            <param name="learningTimes">学習回数</param>
            <param name="learningStrength">
            学習強度（要素数はモデル数と一致すること）
            <para>
            学習強度が各モデルの特徴数に比例しないように導入しました。
            0に設定すると学習は行われません。
            経験的には、1以外を設定してもろくなことはありませんでした。
            浮動小数点に切り替えて、100回に1回多く学習するとかにしたら良いのかもしれませんが。。。
            </para>
            </param>
            <returns>識別器の出力誤差積算値</returns>
        </member>
        <member name="M:PatternRecognition.Teacher.Learn(System.Int32,System.Int32[],PatternRecognition.ArtificialNeuralNetwork.NeuralNetwork,System.Collections.Generic.List{PatternRecognition.Model})">
            <summary>
            学習を実行させる
            <para>学習強度を引数で設定可能です。</para>
            </summary>
            <param name="learningTimes">学習回数</param>
            <param name="learningStrength">学習強度（要素数はモデル数と一致すること）</param>
            <param name="discriminator">学習させる識別器</param>
            <param name="classForLearning">学習用教師データモデル</param>
            <returns>識別器の出力誤差積算値</returns>
        </member>
        <member name="M:PatternRecognition.Teacher.CV(System.Int32,System.Int32,System.String)">
            <summary>
            交差確認法（Cross Validation）を用いた特徴ベクトルの評価を行います
            <para>確認結果をファイルとして出力します。ファイル名は引数で指定可能です。</para>
            <para>モデル選択はランダム、モデルからの特徴データの取得もランダムとします。</para>
            <para>本メソッドによる学習成果はModelクラスの保持する識別器へは反映されません。</para>
            <para>交差検定で使用する分割数は教師データ数に合わせて自動的に決定されます。</para>
            <para>コード可読性が低いのでいつか変えると思う。。。</para>
            </summary>
            <param name="learningTimes">一回の試行当たりの学習回数</param>
            <param name="checkNum">試行回数</param>
            <param name="fname">保存ファイル名</param>
            <returns>交差検定で使用した分割数<para>最大でも10となります。</para></returns>
        </member>
        <member name="M:PatternRecognition.Teacher.GetModelIDname(System.String)">
            <summary>
            ファイル名からクラスモデル名を抽出して返す
            </summary>
            <param name="fname">ファイル名</param>
            <returns>クラスモデル名</returns>
        </member>
        <member name="M:PatternRecognition.Teacher.GetModelIDs(System.String[])">
            <summary>
            ファイル名の一覧から、クラスモデル名を抽出して一覧として返す
            </summary>
            <param name="fnames">*.feaで該当したファイル名の一覧</param>
            <returns>クラスモデル名の一覧</returns>
        </member>
        <member name="M:PatternRecognition.Teacher.Setup(PatternRecognition.Model[])">
            <summary>
            モデルオブジェクトを用いてセットアップします
            <para>既にセットされていたモデルは初期化されます。</para>
            <para>なお、モデルオブジェクトはディープコピーされます。</para>
            </summary>
            <param name="models">セットするモデル</param>
        </member>
        <member name="M:PatternRecognition.Teacher.Setup(System.String)">
            <summary>
            フォルダを指定してモデルデータを読み込む
            <para>既にセットされていたモデルは初期化されます。</para>
            <para>読み込んだファイル名の一覧よりモデルリストを作成し、ファイルの中身から入力層に必要なユニット数を確保します。</para>
            <para>読み込まれた特徴量がモデルによって異なる場合は、学習の段階で入力ユニット数と特徴ベクトルのサイズの不一致に関するエラーがスローされます。</para>
            </summary>
            <param name="dirName">特徴データの格納されたフォルダ名</param>
            <exception cref="T:System.SystemException">ファイルから読み込んだ特徴ベクトルの長さとニューラルネットの入力層ユニット数が一致しない場合にスロー</exception>
        </member>
        <member name="M:PatternRecognition.Teacher.#ctor(System.Object)">
            <summary>
            識別器を学習させるTeacherクラスのコンストラクタ
            </summary>
            <param name="parameter">学習器用のパラメータ<para>学習器のコンストラクタへモデル情報とともに渡されます。</para></param>
        </member>
        <member name="P:PatternRecognition.Teacher.Length">
            <summary>
            クラスモデル数
            </summary>
        </member>
        <member name="P:PatternRecognition.Teacher.ExistOfSameID">
            <summary>
            登録クラス内に同じIDを持つものがないかチェックし、同じIDを持つものが在ればtrueを返す
            </summary>
        </member>
        <member name="P:PatternRecognition.Teacher.ExistOfSameFeature">
            <summary>
            登録されれている全特徴ベクトルについて2重登録を確認し、2重登録が在ればtrueを返す
            </summary>
        </member>
        <member name="P:PatternRecognition.Teacher.ModelIDs">
            <summary>
            保持しているクラスモデルのID
            </summary>
        </member>
        <member name="P:PatternRecognition.Teacher.Ready">
            <summary>
            学習準備
            <para>学習準備が整っていればtrue</para>
            </summary>
        </member>
        <member name="P:PatternRecognition.Teacher.EachAccurecyRate">
            <summary>
            モデル個々の識別率
            <para>識別率はモデルIDとセットにしてハッシュテーブルで表します。</para>
            <para>なお、処理の実態はGetAccurecyRate()の出力値です。</para>
            <para>格納される値の定義：モデルの正答数/モデルの特徴ベクトル数</para>
            <para>演算が不可能な場合はnullが返ります。</para>
            <para>演算には時間が少々かかりますので、まとまった学習を実施後にチェックするようにして下さい。</para>
            </summary>
        </member>
        <member name="P:PatternRecognition.Teacher.TotalAccurecyRate">
            <summary>
            全モデルの総合識別率
            <para>処理の実態はGetTotalAccurecyRate()の出力値です。</para>
            <para>格納される値の定義：正答の総数/特徴ベクトルの総数</para>
            <para>演算が不可能な場合はNaNが返ります。</para>
            <para>演算には時間が少々かかりますので、まとまった学習を実施後にチェックするようにして下さい。</para>
            </summary>
        </member>
        <member name="P:PatternRecognition.Teacher.Parameter">
            <summary>
            学習に使用する学習器の構成情報
            </summary>
        </member>
        <member name="P:PatternRecognition.Teacher.RandomModelChoice">
            <summary>
            学習時にモデルの学習順をランダムにするかどうかを決める
            <para>true: ランダムに学習する</para>
            </summary>
        </member>
        <member name="P:PatternRecognition.Teacher.PickOutMode">
            <summary>
            クラスモデルから特徴ベクトルを選ぶ方法を選びます
            <para>順繰り抜き出す方法とランダムに抜き出す方法があります。</para>
            </summary>
        </member>
        <member name="T:PatternRecognition.ArtificialNeuralNetwork.Layer">
            <summary>
            ニューラルネットにおける入力・中間・出力層クラス
            <para>入力層から出力層までを扱うクラスです。</para>
            <para>利用クラスにおいて層を配列として宣言して扱ってもよかったのだろうけど、なんだか嫌だったのでこのクラスを一つ宣言すれば完結するようにした。</para>
            <para>メモ：処理には再帰構造を使っています。</para>
            <para>2011/12/11現在、ユニット間の結合係数は層の出力を得るたびに逐次処理を行っているので厳密にはBPのアルゴリズムとはずれるんだけど上手く動いている。</para>
            </summary>
        </member>
        <member name="F:PatternRecognition.ArtificialNeuralNetwork.Layer.grossLayerNum">
            <summary>
            総層数
            </summary>
        </member>
        <member name="F:PatternRecognition.ArtificialNeuralNetwork.Layer.myLayerNum">
            <summary>
            通し層番号
            </summary>
        </member>
        <member name="F:PatternRecognition.ArtificialNeuralNetwork.Layer.units">
            <summary>
            この層が保持するユニット
            </summary>
        </member>
        <member name="F:PatternRecognition.ArtificialNeuralNetwork.Layer.parameter">
            <summary>
            ニューラルネットのパラメータ
            </summary>
        </member>
        <member name="F:PatternRecognition.ArtificialNeuralNetwork.Layer.subsidiaryLayer">
            <summary>
            下層レイヤ
            </summary>
        </member>
        <member name="F:PatternRecognition.ArtificialNeuralNetwork.Layer.learningCoefficient">
            <summary>
            学習係数
            </summary>
        </member>
        <member name="F:PatternRecognition.ArtificialNeuralNetwork.Layer.preLayerUnitNum">
            <summary>
            前層のユニット数
            </summary>
        </member>
        <member name="F:PatternRecognition.ArtificialNeuralNetwork.Layer.variationError">
            <summary>
            出力層における平均出力誤差の変化量
            </summary>
        </member>
        <member name="F:PatternRecognition.ArtificialNeuralNetwork.Layer.backupError">
            <summary>
            出力層における平均出力誤差のバックアップ
            </summary>
        </member>
        <member name="F:PatternRecognition.ArtificialNeuralNetwork.Layer.totalOutputError">
            <summary>
            出力層における出力誤差の総計
            <para>以下で定義しています。</para>
            <para>sumError += Math.Abs(this.units[i].Error);</para>
            </summary>
        </member>
        <member name="F:PatternRecognition.ArtificialNeuralNetwork.Layer.myRandom">
            <summary>
            乱数生成器
            <para>教師データに対する誤差量に加える乱数に利用します。</para>
            </summary>
        </member>
        <member name="M:PatternRecognition.ArtificialNeuralNetwork.Layer.ToString">
            <summary>
            この層が保持する全ユニットの結合係数を文字列化する
            </summary>
            <returns>文字列化したレイヤ情報</returns>
        </member>
        <member name="M:PatternRecognition.ArtificialNeuralNetwork.Layer.GetThreshold">
            <summary>
            各ユニットが持つ発火の閾値を配列で取得する
            </summary>
            <returns></returns>
        </member>
        <member name="M:PatternRecognition.ArtificialNeuralNetwork.Layer.GetWeight(System.Int32)">
            <summary>
            指定された前段のユニット番号に対する重みを配列で返す
            <remarks>
            例えば本オブジェクトが出力層である時に8という数字が指定された場合、直前の中間層の持つ第9ユニットに対する結合係数を返す。
            </remarks>
            </summary>
            <param name="index">前段のユニット番号</param>
            <returns>指定ユニットと結びついた重み</returns>
        </member>
        <member name="M:PatternRecognition.ArtificialNeuralNetwork.Layer.GetError">
            <summary>
            各ユニットの出力誤差を配列で返す
            </summary>
            <returns>出力誤差</returns>
        </member>
        <member name="M:PatternRecognition.ArtificialNeuralNetwork.Layer.GetOutput">
            <summary>
            各ユニットの出力値を配列で返す
            </summary>
            <returns>ユニットの出力</returns>
        </member>
        <member name="M:PatternRecognition.ArtificialNeuralNetwork.Layer.CalcOwnUnitsError(PatternRecognition.Vector,PatternRecognition.Vector)">
            <summary>
            ユニットの出力誤差を計算し、ユニットに記憶させる
            </summary>
            <param name="NeuralNetTeacher">教師ベクトル</param>
            <param name="myOutput">出力ベクトル</param>
        </member>
        <member name="M:PatternRecognition.ArtificialNeuralNetwork.Layer.GetAmountOfCorrection(System.Double,System.Double,System.Double)">
            <summary>
            結合荷重の修正量を返す
            </summary>
            <param name="unitOutputError">ユニットの出力誤差</param>
            <param name="unitOutput">ユニットの出力値</param>
            <param name="preLayerOutput">調整したい結合荷重が接続された前段ユニットの出力値</param>
            <returns>重み修正量</returns>
        </member>
        <member name="M:PatternRecognition.ArtificialNeuralNetwork.Layer.CalibrateWeightAndThreshold(PatternRecognition.Vector,PatternRecognition.Vector)">
            <summary>
            結合係数修正量の計算、および発火の閾値修正を実施する
            <para>ユニットの誤差量を計算した後に呼び出してください。</para>
            </summary>
            <param name="preLayerOutput">前段の層の出力</param>
            <param name="myOutput">この層の出力ベクトル</param>
            <exception cref="T:System.SystemException">入力層で本メソッドが呼び出されるとスロー</exception>
        </member>
        <member name="M:PatternRecognition.ArtificialNeuralNetwork.Layer.CalibrateWeightVectors">
            <summary>
            全てのユニットに対して予めセットした修正量を適用して、結合係数を調整する
            <para>より下層に位置するLayerの修正も指示する。</para>
            </summary>
        </member>
        <member name="M:PatternRecognition.ArtificialNeuralNetwork.Layer.GetResult(PatternRecognition.Vector,PatternRecognition.Vector)">
            <summary>
            特徴ベクトルを渡して、演算結果を返す
            </summary>
            <param name="preLayerOutput">特徴ベクトル／前段の出力ベクトル</param>
            <param name="teacher">教師ベクトル</param>
            <returns>演算結果</returns>
        </member>
        <member name="M:PatternRecognition.ArtificialNeuralNetwork.Layer.InitWeightVectorWithRandom">
            <summary>
            重みベクトルを乱数で初期化する
            </summary>
        </member>
        <member name="M:PatternRecognition.ArtificialNeuralNetwork.Layer.Setup(System.String)">
            <summary>
            ファイル名を指定して結合係数を読み込ませる
            </summary>
            <param name="fname">ファイル名</param>
        </member>
        <member name="M:PatternRecognition.ArtificialNeuralNetwork.Layer.#ctor(PatternRecognition.ArtificialNeuralNetwork.Parameter,System.Int32,System.Int32)">
            <summary>
            レイヤークラスのコンストラクタ
            <para>このクラスインスタンスを一つ生成すれば、入力層から出力層までを表現可能です。</para>
            <para>
            本クラスを生成する際、numOfPreLayerUnitは0と設定することをお勧めします。
            0でなくともエラーは出ませんが、入力層には結合係数が定義されないためです。
            </para>
            </summary>
            <param name="_parameter">ニューラルネットのパラメータ</param>
            <param name="_myLayerNum">層番号</param>
            <param name="numOfPreLayerUnit">前の層のユニット数（省略可能です。デフォルトでは0となります。）</param>
        </member>
        <member name="M:PatternRecognition.ArtificialNeuralNetwork.Layer.#cctor">
            <summary>
            スタティックメンバ用のコンストラクタ
            </summary>
        </member>
        <member name="P:PatternRecognition.ArtificialNeuralNetwork.Layer.MyKind">
            <summary>
            この層の種類
            </summary>
        </member>
        <member name="P:PatternRecognition.ArtificialNeuralNetwork.Layer.LearningCoefficient">
            <summary>
            学習係数
            </summary>
        </member>
        <member name="P:PatternRecognition.ArtificialNeuralNetwork.Layer.Lenght">
            <summary>
            ユニット数
            </summary>
        </member>
        <member name="P:PatternRecognition.ArtificialNeuralNetwork.Layer.VariationOfError">
            <summary>
            出力誤差の変化量
            </summary>
        </member>
        <member name="P:PatternRecognition.ArtificialNeuralNetwork.Layer.TotalOutputError">
            <summary>
            出力層の全ユニット出力の誤差を合計したもの
            <para>絶対値をとった各ユニットの誤差を合計したものです。</para>
            </summary>
        </member>
        <member name="T:PatternRecognition.ArtificialNeuralNetwork.Layer.Kind">
            <summary>
            層の種類
            </summary>
        </member>
        <member name="F:PatternRecognition.ArtificialNeuralNetwork.Layer.Kind.InputLayer">
            <summary>入力層</summary>
        </member>
        <member name="F:PatternRecognition.ArtificialNeuralNetwork.Layer.Kind.HiddenLayer">
            <summary>中間層（隠れ層）</summary>
        </member>
        <member name="F:PatternRecognition.ArtificialNeuralNetwork.Layer.Kind.OutputLayer">
            <summary>出力層</summary>
        </member>
        <member name="F:PatternRecognition.ArtificialNeuralNetwork.Layer.Kind.NA">
            <summary>不定</summary>
        </member>
        <member name="T:PatternRecognition.PatternRecognitionTest">
            <summary>
            パターン認識に関するテストとサンプルコードを兼ねた静的クラス
            </summary>
        </member>
        <member name="M:PatternRecognition.PatternRecognitionTest.Iris_learning">
            <summary>
            NeuralNetTeacherクラスを使って、既に生成されている特徴ベクトルをまとめたファイルを読み込ませて学習を行う part1
            </summary>
        </member>
        <member name="M:PatternRecognition.PatternRecognitionTest.Iris_learning2">
            <summary>
            NeuralNetTeacherクラスを使って、既に生成されている特徴ベクトルをまとめたファイルを読み込ませて学習を行う part2
            </summary>
        </member>
        <member name="M:PatternRecognition.PatternRecognitionTest.XOR_learning">
            <summary>
            XORの学習の例
            <para>NeuralNetworkクラスを直接操作して論理演算を実行する例です。</para>
            </summary>
        </member>
        <member name="M:PatternRecognition.PatternRecognitionTest.sin_learnig">
            <summary>
            sin()関数の学習の例
            <para>NeuralNetworkクラスを直接利用して関数近似を行わせるサンプルです。</para>
            <para>
            2011/12/25現在、0～1までの出力しか得られない。
            出力関数と学習則を変更するか、関数近似時には値のマッピングが必要である。
            他の人はどうやってんだろう？</para>
            </summary>
        </member>
        <member name="T:PatternRecognition.Model">
            <summary>
            モデル
            <para>学習機に対して学習させたいデータを提供します。</para>
            </summary>
        </member>
        <member name="F:PatternRecognition.Model.className">
            <summary>
            クラス名
            </summary>
        </member>
        <member name="F:PatternRecognition.Model.buff">
            <summary>
            クラスを構成する特徴ベクトルバッファ
            <para>特徴ベクトルを格納します。</para>
            </summary>
        </member>
        <member name="F:PatternRecognition.Model.offerBuff">
            <summary>
            提供用の特徴ベクトルバッファ
            <para>特徴ベクトルを格納します。</para>
            </summary>
        </member>
        <member name="F:PatternRecognition.Model.readPoint">
            <summary>
            特徴ベクトルの読み出しポイント
            <para>GetFeatureメソッドの読み出し時に使用する。</para>
            </summary>
        </member>
        <member name="F:PatternRecognition.Model.myRandom">
            <summary>
            乱数ジェネレータ
            <para>モデル内に格納している特徴ベクトルを外部から読み取る際にランダムにするのに利用します。</para>
            </summary>
        </member>
        <member name="F:PatternRecognition.Model.divisionNum">
            <summary>
            分割数
            <para>供給モードがNonGroup以外の場合に有効となる特徴ベクトルの分割数です。</para>
            </summary>
        </member>
        <member name="F:PatternRecognition.Model.indexForDivision">
            <summary>
            分割時の注目インデックス
            <para>供給モードがNonGroup以外の場合に有効となるインデックスです。</para>
            <para>このインデックスに該当するグループはFeatureSupplyModeに従い無視・注目されます。</para>
            <para>インデックスはセット時に評価され、不正な場合は適当な数字に置き換えられます。</para>
            </summary>
        </member>
        <member name="M:PatternRecognition.Model.ToString">
            <summary>
            クラスの構成メンバ（特徴ベクトル）を文字列化する
            <para>統計処理に利用可能なように最後の要素にクラス名をラベルとして追加しています。</para>
            </summary>
            <returns>文字列化したクラスメンバ</returns>
        </member>
        <member name="M:PatternRecognition.Model.Shuffle">
            <summary>
            バッファメンバをシャッフルする
            </summary>
        </member>
        <member name="M:PatternRecognition.Model.GetFeature">
            <summary>
            保持する特徴ベクトルを分割し、指定インデックスを除いた部分から一つの特徴ベクトルを返す
            <para>学習用に特徴ベクトルを提供します。提供方法はランダムとシーケンシャルの二通りが可能です。設定はプロパティを通して設定してください。</para>
            </summary>
            <returns>特徴ベクトル</returns>
        </member>
        <member name="M:PatternRecognition.Model.Add(PatternRecognition.Feature)">
            <summary>
            特徴ベクトルの追加
            </summary>
            <param name="newMember">追加メンバ</param>
        </member>
        <member name="M:PatternRecognition.Model.#ctor(System.String)">
            <summary>
            コンストラクタ
            <para>クラスIDのみを設定するコンストラクタです。</para>
            </summary>
            <param name="_id">クラス名</param>
        </member>
        <member name="M:PatternRecognition.Model.#ctor(System.String,PatternRecognition.Feature[])">
            <summary>
            メンバの初期化付コンストラクタ
            <para>クラスメンバはディープコピーされます。</para>
            </summary>
            <param name="_id">クラス名</param>
            <param name="_members">メンバ</param>
            <exception cref="T:System.SystemException">メンバがnullであったりメンバ数が0もしくは渡された特徴ベクトルの時限数が不一致だとスロー</exception>
        </member>
        <member name="M:PatternRecognition.Model.#ctor(PatternRecognition.Model)">
            <summary>
            コピーコンストラクタ
            <para>メンバーはディープコピーされます。</para>
            </summary>
            <param name="model">コピー元のモデル</param>
        </member>
        <member name="P:PatternRecognition.Model.MemberSize">
            <summary>
            構成メンバの大きさ
            <para>特徴ベクトルのサイズです。</para>
            </summary>
        </member>
        <member name="P:PatternRecognition.Model.Length">
            <summary>
            保持している全特徴ベクトル数
            </summary>
        </member>
        <member name="P:PatternRecognition.Model.LengthForGetFeature">
            <summary>
            現時点でGetFeature()メソッドが返すことのできる特徴ベクトルの数
            <para>バグを検出した場合に-1を返すことがあります。</para>
            </summary>
        </member>
        <member name="P:PatternRecognition.Model.ID">
            <summary>
            クラス名（ID）
            </summary>
        </member>
        <member name="P:PatternRecognition.Model.SequenceMode">
            <summary>
            読み込みモード
            <para>ランダムに読み出すか、順番で読みだすかを決めます。</para>
            </summary>
        </member>
        <member name="P:PatternRecognition.Model.FeatureSupplyMode">
            <summary>
            特徴ベクトルの供給モード
            <para>特徴ベクトルの提供する際に分割し、特定のインデックスに注目するかどうかを決定します。</para>
            <para>NonGroupの場合、分割数設定</para>
            </summary>
        </member>
        <member name="P:PatternRecognition.Model.DivisionNum">
            <summary>
            分割数
            <para>供給モードがNonGroup以外の場合に有効となる特徴ベクトルの分割数です。</para>
            <para>分割設定数はセット時に評価され、不正な場合は適当な数字に置き換えられます。</para>
            <para>なお、本値の変更によりIndexForDivisionに矛盾が生じる場合、IndexForDivisionは自動的に0にリセットされます。</para>
            </summary>
        </member>
        <member name="P:PatternRecognition.Model.IndexForDivision">
            <summary>
            分割時の注目インデックス
            <para>供給モードがNonGroup以外の場合に有効となるインデックスです。</para>
            <para>
            インデックスはセット時に評価され、不正な場合は適当な数字に置き換えられます。
            GetFeature()は、DivisionNumにより分割したと仮定した教師ベクトル群の内、指定したインデックス番号のみFeatureSupplyModeに従い無視・注目してベクトルを返ます。
            ただし、DivisionNumが1の場合はこの引数自体が無視され、全ベクトルが返り値の対象となります。
            </para>
            </summary>
        </member>
        <member name="P:PatternRecognition.Model.Item(System.Int32)">
            <summary>
            インデクサ
            <para>本モデルが保持している全ての特徴ベクトルにアクセス可能です。</para>
            </summary>
            <param name="i">インデックス番号</param>
            <returns>指定インデックスの特徴ベクトル</returns>
        </member>
        <member name="T:PatternRecognition.Model.ReadSequenceMode">
            <summary>
            特徴ベクトルの読み出しモード
            </summary>
        </member>
        <member name="F:PatternRecognition.Model.ReadSequenceMode.AtRandom">
            <summary>
            ランダムに読み出す
            </summary>
        </member>
        <member name="F:PatternRecognition.Model.ReadSequenceMode.InRotation">
            <summary>
            格納されている特徴ベクトルを順番に読み出すモード
            </summary>
        </member>
        <member name="T:PatternRecognition.Model.SupplyMode">
            <summary>
            特徴ベクトルの供給モード
            </summary>
        </member>
        <member name="F:PatternRecognition.Model.SupplyMode.NeglectParticularGroup">
            <summary>
            保持する特徴データを分割したと仮定して、特定の組を無視して特徴ベクトルを供給する
            </summary>
        </member>
        <member name="F:PatternRecognition.Model.SupplyMode.TakeParticularGroup">
            <summary>
            保持する特徴データを分割したと仮定して、特定の組から特徴ベクトルを供給する
            </summary>
        </member>
        <member name="F:PatternRecognition.Model.SupplyMode.NonDivide">
            <summary>
            分割を行わず、インデックス無視して特徴ベクトルを供給する
            </summary>
        </member>
        <member name="T:PatternRecognition.ArtificialNeuralNetwork.MinParameter">
            <summary>
            NN用最小パラメータ
            </summary>
        </member>
        <member name="M:PatternRecognition.ArtificialNeuralNetwork.MinParameter.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            ニューラルネットワーク用の最小演算条件を表すMinParameter構造体のコンストラクタ
            </summary>
            <param name="_numOfUnitInHiddenLayer">中間層のユニット数<para>この数が多いと、過学習に陥りやすくなります。n個で2^n状態を表すことができることを考慮して決定して下さい。</para></param>
            <param name="_numOfHiddenLayer">中間層数<para>この数+1だけ識別面（超平面）が形成されます。特徴量の分布をよく検討しなければまずいことになりそうです。</para></param>
            <param name="_learningCoefficient">学習係数<para>この数が大きいと結合係数の修正量が大きくなりすぎていつまでも収束しなくなります。かといって小さいといつまでも終わりません。カットアンドトライで確認してみてください。</para></param>
        </member>
        <member name="P:PatternRecognition.ArtificialNeuralNetwork.MinParameter.NumOfUnitInHiddenLayer">
            <summary>
            中間層のユニット数
            </summary>
        </member>
        <member name="P:PatternRecognition.ArtificialNeuralNetwork.MinParameter.NumOfHiddenLayer">
            <summary>
            中間層数
            </summary>
        </member>
        <member name="P:PatternRecognition.ArtificialNeuralNetwork.MinParameter.LearningCoefficient">
            <summary>
            学習係数
            </summary>
        </member>
        <member name="T:PatternRecognition.Feature">
            <summary>
            特徴ベクトル
            <para>Vectorクラスのラッパー</para>
            <para>クラス名から特徴ベクトルであることを連想しやすいようにラップした。</para>
            </summary>
        </member>
        <member name="M:PatternRecognition.Feature.#ctor(System.Double[])">
            <summary>
            double型配列を使った初期化付コンストラクタ
            <para>配列はディープコピーされます。</para>
            </summary>
            <param name="_vector">double型配列による特徴ベクトル</param>
            <exception cref="T:System.SystemException">配列がnullならスロー</exception>
        </member>
        <member name="M:PatternRecognition.Feature.#ctor(PatternRecognition.Feature)">
            <summary>
            コピーコンストラクタ
            </summary>
            <param name="_vector">Featureクラスオブジェクト</param>
            <exception cref="T:System.SystemException">配列がnullならスロー</exception>
        </member>
        <member name="M:PatternRecognition.Feature.#ctor(System.String)">
            <summary>
            文字列を利用したコンストラクタ
            <para>カンマ・タブ・半角スペースで区切られた文字列を渡して下さい。</para>
            <para>解析に成功すると文字列に含まれていた数値がセットされます。</para>
            </summary>
            <param name="_vector">文字列で表現した特徴ベクトル</param>
        </member>
        <member name="M:PatternRecognition.Feature.#ctor(System.Int32)">
            <summary>
            サイズ指定のコンストラクタ
            <para>指定したサイズのベクトルを生成します。生成後に一つ一つの要素にアクセスする用途を想定しています。</para>
            </summary>
            <param name="size">ベクトルサイズ</param>
        </member>
        <member name="M:PatternRecognition.Feature.#ctor(System.Double)">
            <summary>
            要素数1のベクトルを生成します
            <para>関数近似などの用途を想定しています。</para>
            </summary>
            <param name="value">格納したい数</param>
        </member>
        <member name="M:PatternRecognition.Feature.#ctor">
            <summary>
            初期化なしのコンストラクタ
            <para>空のベクトルを生成します。適宜要素を追加するような用途での使用を想定しています。</para>
            </summary>
        </member>
    </members>
</doc>
