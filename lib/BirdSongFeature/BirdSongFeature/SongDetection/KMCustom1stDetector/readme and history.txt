/******************************************************************************
 * SignalBasic.cs
 * 
 * [開発者]
 *  森下功啓（Katsuhiro Morishita）
 * 
 * [プログラムの目的と課題]
 *  本プログラムの使用目的は、ノイズフロアから飛び出す音声を検出することです。
 *  識別対象としては当面の間は鳥類です。
 *  
 *  本プログラムの課題は、如何にノイズフロアを認識するのかという点にあります。
 *  カエルが鳴こうが雨が降ろうが風が吹こうがノイズが時間的に変化しようが認識させたいと考えています。
 *  基本的には統計的な考えを入れる必要がありますが、鳥類はかなりバリエーションの多い鳴き方をするため万能なフィルタの設計は不可能です。
 *  長い時間鳴き続ける種類もあり、少々難しい問題を孕んでいます。
 *  
 *  基本コンセプトは、「音源とマイクの距離によらず検出可能でしかもノイズフロアの変動に強い」です。
 * 
 * [プログラム概要]
 *  本ソースコードにおけるSignalBasicクラスは、FFTの結果を渡す事で任意の帯域における鳴き声を検出するためのクラスです。
 *  設計構造の問題から、認識には数秒間の初期化時間が必要です。
 *  初期化時間は、5秒～20秒です。
 *  音声ファイルの先頭から鳴き続けられると、信号はノイズなのか鳴き声なのかは不明なので、初期化時間が長くなります。
 *  
 *  2011/11/18現在では、どんな音源に対しても一定の成績を挙げるものの、万能なパラメータは見つけていません。
 *  現時点では大抵の音源に対して処理可能なパラメータを設定しています。
 *  私自身が使用した感想としては、「発声を検出」とされても時間的に短いものは無視するという処理を後で行うことでノイズの影響を排除可能だと思っています。
 *  
 *  鳥の鳴き声検出の流れは、「鳴き声検出」「音声部分抜き出し」「識別」です。
 *  本プログラムでは「鳴き声検出」部分を担当します。
 *  世の中の主流（少なくとも鳥類の音声研究において）は、音声モデルを「手作業」で作って、SS法で背景雑音の影響を除去するらしいです。
 *  これは音源が異なればもう一度再度モデルを再構築する必要があります。
 *  私はそんな手間はかけたくありません。
 *  もしかすると、人間の言語認識ソフトウェアの分野では既に解決された問題かもしれませんが…。
 *  
 *  本プログラムによって音源ファイルから「鳴き声」らしき部分を検出させて、その後の処理にゴミデータとの識別を任せる形でプログラムをモジュール化する予定です。
 *  従って、本クラスに音源モデルを導入する気はありません。
 * 
 * [検出原理]
 *  一定程度のノイズデータが集まれば、それはガウス分布をしているに違いありません。
 *  平均と標準偏差が計算できれば、入力データがそれまでの分布内に入るかどうかを検定することが可能です。
 *  従って、一定時間の無音期間があればノイズモデルを構築して発声部分を検出することが可能です。
 *
 *  ノイズフロアは数秒周期で変動することも有るので、一度モデルを構築した後に更新が行われないと音声を誤検出してしまいます。
 *  従って、リングバッファを用いてある時間幅だけ観測情報を保持するようにして、モデルを更新します。
 *  リングバッファを用いてノイズモデルを構築するので、リングバッファには、発声部分以外の観測データを入れる必要があります。
 *
 *  ここで、発声部分がどのようなデータであるかを定義しておきます。
 *  一定の周波数帯域におけるノイズとは、ほぼ一定の標準偏差で振幅が変動する信号です。
 *  欲しいのは非常に大きくうねる部分です。
 *  うねりの大きさは、ノイズの振幅との比で表すことができます。
 *
 *  従って、検定では
 *  1) パワースペクトル密度の底はノイズフロアレベル
 *  という仮定を置くことができます。
 *  ついでに以下も仮定しておきます。
 *  2) 無音区間が十分にあって、本当のノイズフロアはいつか確実に得られる
 *
 *  検定では平均値を用いる代わりに、一定時間内の最低値を用います。
 *  プログラムが走り始めた当初は全ての観測データを取る必要があるので、必然として推定される分散は全データ分です。
 *  また、分布がガウス分布であれば最低値≒平均-3σ程度とみなして構いません。
 *  従って、平均の代わりに最低値を用いるとz = (観測値-最低値)/標準偏差でz > 3～5だとほぼうねりのピーク部分であると言えます。
 *  このピークと認識された観測データをリングバッファに入れないことにより、より低いノイズフロアを収集することが可能です。
 *
 *  以上の処理によって、音声データから発声部分を抜き出すことはできるのですが、発声部分と識別されたデータをリングバッファに入れないでいると、必然としてノイズフロアが上昇する場合に対応できません。
 *  また、微小な信号に対しての感度が高くなりすぎます。
 *  これはより小さな値だけを収集していくとそのデータ系列の標準偏差が小さくなるために生じる問題です。
 *  従って、時々は大きな値をリングバッファに入れて、標準偏差が小さくなり過ぎないように工夫する必要があります。
 *  本プログラムでは、発声部分とする閾値とリングバッファに格納する閾値との間にマージンを設けることでこれに対処しています。
 *  つまり、発声部分と識別されても、ある程度ならばリングバッファに入れてしまうということです。 
 * 
 * [今後の開発方針]
 *  1) 強制的に鳴き声（発声）しているということを認識させるメソッドを追加
 *  2) もしかすると、後処理機能を追加するかも。
 *  3) 検出・ノイズフロアの変化応答性能が割と出たのでもう十分かなと個人的には考えている。
 *  
 * [履歴]
 *  2011/11/15  整備開始
 *              とりあえず、信号検出部分を急いで整備した。
 *              コンセプトを昨年の内に考えていた割に、作り始めると意外と時間がかかる。。
 *  2011/11/18　連日整備を続けて、ようやくバグをなくして来たかな？
 *              なお、本クラスは現時点では作りかけの状態ですので将来、大きな改修が行われる可能性があります。
 *  2012/5/4    FFT関連クラスの名前空間の変更に伴いコードを一部変更した。
 *              また、コメントの一部にミスがあったのを修正している。
 *	2012/5/18	整理のためにファイル分割
 * ****************************************************************************/